#!/bin/bash
#
# Dependencies:
#   (both local and remote host): ssh, scp, tar 
#   (only local): git, uci
# Getting uci for yourself is really easy:
#   uci git clone git://nbd.name/uci.git
# (compilation is a breeze)
# or simply redefine getIpFromUciConfig()
#
#       Copyleft 2012 Gui Iribarren <gui@altermundi.net>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#
### 
### Usage: $0 push [-n] [-f|-q] [-w secs] [-i <host>] NAME [[-i <host>] NAME] ...
###        $0 pull [-z] [-i <host>] NAME [[-i <host>] NAME] ...
###        $0 confirm NAME [NAME] ...
###        $0 status [-f] [-i <host>] NAME [[-i <host>] NAME] ...
### 
### Manage remote uci configuration in NAME(s)
### 
###  -w, --wait NUM	  After applying configuration, wait for NUM seconds
###                     before reboot.
###  -i, --ip HOST		Override the IP used for pull, push, status...
###                     Applies only to the next NAME specified in command line.
###  -n, --no-reboot	Prevent rebooting after pushing and applying configuration.
###  -z, --gzip       Use gzip compression on incoming network traffic during pull.
###                     Better perfomance on slow links, at the expense of high cpu load.
###  -f, --full       Push (or check) whole /overlay instead of just /overlay/etc.
###                     Increases network traffic = slower perfomance.
###                     Useful to check for package installs or removals
###                     or to push a complete overlay to a clean install of openwrt.
###  -q, --quick      Push only a small subset of files in /etc that don't need reboot,
###                     such as /etc/hosts. Implies -n, overrides -f.
###
#
#

export REBOOT_WAIT=15  # in seconds #DEPRECATED
export TIMEOUT=15  # in seconds
export REBOOT_CMD="/usr/sbin/safe-reboot now &>/tmp/safe-reboot.log"
export SAFE_REBOOT="/usr/sbin/safe-reboot"
export NO_REBOOT_CMD="/bin/true"
export TAR="tar" # This command must accept argument -z to enable gzip compression
export CMDNAME="$(basename "$0")"
export SSH_PERSIST="ssh -o \"ControlMaster auto\" \
                    -o \"ControlPath /tmp/${CMDNAME}_ssh_%r@%h:%p\" \
                    -o \"ControlPersist 60\" \
                    -o \"ServerAliveInterval 10\" \
                    -o \"ConnectTimeout 20\" \
                   "
export EPOCH="$(date +%s)"

export DIR_OVERLAY="overlay"
export DIR_UCI_CONFIG="$DIR_OVERLAY/etc/config/"
export DIR_PULL_TMP="remote.$EPOCH"
export DIR_TO_DIFF="${DIR_OVERLAY:?}/etc"
export DIR_PUSH_TMP="overlay.new.$EPOCH"
export DIR_TO_PUSH="etc/"
export FILES_TO_QUICK_PUSH="etc/{dropbear/authorized_keys,bat-hosts,hosts,profile,shadow}"
export ETC_FAILSAFE="etc.last-good/"

export CNAMES_PUSHED="/tmp/ruci.pushed.$EPOCH"
export CNAMES_DIRTY="/tmp/ruci.dirty.$EPOCH"
#export TMP_CLONE="/tmp/ruci.hgclone.$EPOCH"
cat /dev/null >"${CNAMES_PUSHED:?}"
cat /dev/null >"${CNAMES_DIRTY:?}"

# WTF? what does this blob contain? ...decode:
# # spit_gzipped_safe_reboot | gzip -cd > /tmp/safe-reboot
# how to update this blob
# # gzip -c safe-reboot | base64
spit_gzipped_safe_reboot () {
  cat << EOF | base64 -d
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
2JVpa3B4/wez1yglXxYAAA==
EOF
}

usage () { REASON="$*"
  [ -n "$REASON" ] && echo "$REASON"
  sed -n "/^### /{s///;s|\$0|$CMDNAME|g;p}" "$0"
  exit 1
}

getIpFromUciConfig () { 
  grep hostname "$DIR_UCI_CONFIG/system" | cut -d \' -f 2
}

repoIsClean () {
  STDOUT="$(git status -s .)" ; RETVAL=$?
  ([ -z "$STDOUT" ] && [ $RETVAL -eq 0 ]) && return 0 || return 1
}

repoIsEqualToRev () { REV="${1:?}" ; DIR="${2:-$DIR_OVERLAY}"
  STDOUT="$(git diff -r $REV "$DIR")" ; RETVAL=$?
  ([ -z "$STDOUT" ] && [ $RETVAL -eq 0 ]) && return 0 || return 1
}

repoAutocommit () {
  git commit -a -m "Autocommit local changes before pulling." "$DIR_OVERLAY"
}

repoLastRev () {
  git log --pretty=format:%H -n 1 "$DIR_OVERLAY"
}

writeLastRevPushed () {
  repoLastRev > ".lastrevpushed"
}

readLastRevPushed () {
  [ -s ".lastrevpushed" ] && cat ".lastrevpushed" || echo 0
}

tstamp () {
  date +%F_%T.%3N
}

log () { TEXT="$*"
  [ "$1" == "*" ] && CNAME="*" || CNAME="$(basename `pwd -L`)"
  echo "$TEXT" \
    | sed "/tar: removing leading ... from member/d" \
    | sed "s|^|[$CNAME] $(tstamp): |" \
    | tee -a "$LOGFILE"
}
 
try () { CMDLINE="${1:?}"
  CMD="${CMDLINE%% *}"
  CNAME="$(basename `pwd -L`)"
  ERRLOG="/tmp/$CMD.${CNAME////}.$EPOCH"
  
  eval "$CMDLINE" &> "$ERRLOG"
  RETVAL=$?
  if [ -r "$ERRLOG" ] && [ -s "$ERRLOG" ] ; then
    sed "s|^|($CMD) |" -i "$ERRLOG"
    log "$(<"$ERRLOG")"
  fi
  rm -f "$ERRLOG"
  return $RETVAL
}

pullConfigFromIp () { IPADDR="${1:?}"
  RETVAL=
  
  if [ -d "$DIR_OVERLAY" ] && ! repoIsClean ; then
    log "Directory contains uncommited changes. Autocommiting..."
    try "repoAutocommit" \
      || return
  fi

  mkdir -p "$DIR_PULL_TMP"

  log "Pulling /$DIR_OVERLAY from $IPADDR ..."
  try "$SSH_PERSIST $IPADDR \"$TAR -c -f - /$DIR_OVERLAY \" >$DIR_PULL_TMP.tar" \
    || { RETVAL=$? ; rm -rf "$DIR_PULL_TMP"{/,.tar} ; return $RETVAL ; }
  
  try "$TAR -x -f $DIR_PULL_TMP.tar -C $DIR_PULL_TMP" \
    || { RETVAL=$? ; rm -rf "$DIR_PULL_TMP"{/,.tar} ; return $RETVAL ; }

  rm -rf "$DIR_PULL_TMP/$DIR_OVERLAY/$ETC_FAILSAFE" # Ignore the temp $ETC_FAILSAFE on remote hosts
  rm -rf "$DIR_PULL_TMP.tar"
  rm -rf "$DIR_OVERLAY"
  mv "$DIR_PULL_TMP/$DIR_OVERLAY" "$DIR_OVERLAY"
  rm -rf "$DIR_PULL_TMP"
  
  log "Pulled successfully."
}

pushConfigToIp () { IPADDR="${1:?}"
  RETVAL=
  PUSH_FILES=
  
  try "$TAR -c --owner root --group root -f $DIR_PUSH_TMP.tar -C $DIR_OVERLAY/ ./$DIR_TO_PUSH" \
    || { RETVAL=$? ; rm -rf "$DIR_PUSH_TMP.tar" ; return $RETVAL ; }
    
  log "Sending ${DIR_TO_PUSH:-/$DIR_OVERLAY} with '$TAR' to $IPADDR ... "
  try "$SSH_PERSIST $IPADDR \"/bin/mkdir -p /tmp/$DIR_PUSH_TMP/usr/sbin\" " \
    || return
  try "spit_gzipped_safe_reboot | $SSH_PERSIST $IPADDR \"/bin/gzip -cd > $SAFE_REBOOT ; chmod +x $SAFE_REBOOT\"" \
    || return

  try "$SSH_PERSIST $IPADDR \"$TAR -x -f - -C /tmp/$DIR_PUSH_TMP/ \" <$DIR_PUSH_TMP.tar" \
    || { RETVAL=$? ; rm -rf "$DIR_PUSH_TMP.tar" ; return $RETVAL ; }
  
  rm -rf "$DIR_PUSH_TMP.tar"

  log "Config sent. Applying changes..."
  if [ "$DIR_TO_PUSH" != "$FILES_TO_QUICK_PUSH" ] ; then
    log "Sending $DIR_TO_PUSH"
    try "$SSH_PERSIST $IPADDR ' export PATH=\"/bin:/sbin:/usr/bin:/usr/sbin\" ; cd /$DIR_OVERLAY \
                              &&  rm -rf $ETC_FAILSAFE \
                              &&  (  $SAFE_REBOOT -w $REBOOT_WAIT \
                                  && rm -rf ${DIR_TO_PUSH:-*} \
                                  && cp -a /tmp/$DIR_PUSH_TMP/${DIR_TO_PUSH:-*} . ) ' " \
      || return

    writeLastRevPushed
  else
    log "Sending quick"
    try "$SSH_PERSIST $IPADDR '  cd /$DIR_OVERLAY \
                              &&  rm -rf $ETC_FAILSAFE \
                              &&  (  cp -a etc $ETC_FAILSAFE \
                                  && cp -a /tmp/$DIR_PUSH_TMP/etc/* /etc/ ) ' " \
      || return
  fi

  log "Done.$([ "$REBOOT_CMD" == "$NO_REBOOT_CMD" ] || echo " Rebooting in $REBOOT_WAIT secs...")"

  CNAME="$(basename `pwd -L`)"
  echo -n " $CNAME" >> "$CNAMES_PUSHED"
}

confirmConfigToIp () { IPADDR="${1:?}"
  log "Trying to remove $ETC_FAILSAFE in $IPADDR ... "
  try "$SSH_PERSIST $IPADDR \"$SAFE_REBOOT cancel\" " \
    || return

  log "Done."
}

statusConfigFromIp () { IPADDR="${1:?}"
  RETVAL=
  STATUSMSG=
  
  CNAME="$(basename `pwd -L`)"
  
  # Clone the repo to make comparisons
  try "cp -a \"$(hg root)\" \"$TMP_CLONE-$CNAME/\" >/dev/null" \
    || return 1
  rm -f "$TMP_CLONE-$CNAME/.hg/hgrc"
    
  # cd to the temp repo clone
  cd $(pwd|sed "s!$(hg root)!$TMP_CLONE-$CNAME/!") \
    || return 2

  log "Pulling /$DIR_TO_DIFF from $IPADDR ..." >/dev/null
  # Try to pull remote /overlay. If it fails, cleanup .tar tempfile.
  try "$SSH_PERSIST $IPADDR \"$TAR -c -f - /$DIR_TO_DIFF \" >$DIR_PULL_TMP.tar" \
    || { rm -rf "${TMP_CLONE:?}-${CNAME:?}/" ; return ; }
  
  # Unpack recently pulled /overlay
  rm -rf "$DIR_TO_DIFF"
  try "$TAR -x -f $DIR_PULL_TMP.tar"
  
  # Clean up and prepare comparison
  rm -rf "$DIR_PULL_TMP.tar"          
  rm -rf "$DIR_OVERLAY/$ETC_FAILSAFE" # Ignore the temp $ETC_FAILSAFE on remote hosts
  hg addremove "$DIR_TO_DIFF" >/dev/null 
  log "Pulled successfully."  >/dev/null

  # Check if remote has $ETC_FAILSAFE present, suggesting it's on the countdown
  try "$SSH_PERSIST $IPADDR /bin/sh -c \'[ -d /$DIR_OVERLAY/$ETC_FAILSAFE ]\' " \
    && STATUSMSG=" Counting down to revert-to-lastgood..." \
    && echo -n " $CNAME" >> "$CNAMES_PUSHED"
  
  repoIsEqualToRev "-1" "$DIR_TO_DIFF" ; RETVAL=$?
  
  [ -z "$(hg status --rev $REV "$DIR")" ] ; RETVAL=$(( $RETVAL + $?))

  case $RETVAL in
    0)      # Local and remote copies are equal, that means we can consider the current revision as pushed
            # even if it wasn't done with "action push". So, update LastRevPushed cookie
            # If you do "hg commit; ruci push; hg rollback; ...; hg commit", then a simple
            # "ruci status" should update/fix cookies that point to vanished changeset ids.
      ( cd $OLDPWD && writeLastRevPushed )
      log "$IPADDR Reachable and updated.$STATUSMSG"
    ;;
    *)      # If copies differ, might be because local has a new revision waiting to be pushed,
            # (in which case working copy is identical to the one in revision readLastRevPushed)
      hg commit -m "Fresh overlay for comparison"
      try "hg diff --stat --rev -1 --rev -2 \"$DIR_TO_DIFF\" " >/dev/null
      if repoIsEqualToRev "$(readLastRevPushed)" "$DIR_TO_DIFF" ; then
        log "$IPADDR Reachable, outdated. Remote revision $(readLastRevPushed|cut -b -12) .$STATUSMSG"
      else  # or else because changes happened only remotely.
        log "$IPADDR Reachable, with remote untracked changes. Please pull, manually merge and commit.$STATUSMSG"
      fi
      echo -n "${CNAME}|" >> "$CNAMES_DIRTY"
    ;;
  esac
  
  # Clean up the comparison scenario and leave everything as it was previously
  rm -rf "${TMP_CLONE:?}-${CNAME:?}/"
}

pullConfigs () {
  ARG=
  IPADDR=
  
  while [ -n "$1" ]; do
    ARG="$1"
    shift
  
    case "$ARG" in
      -i|--ip ) IPADDR="$1" ; shift ;;
      -z|--gzip ) TAR="$TAR -z" ;;
      * )
        mkdir -p "$ARG"
        cd "$ARG"
          if ! [ -d "$DIR_UCI_CONFIG" ] && [ -z "$IPADDR" ] ; then 
            log "UCI config directory not found! Please prepend --ip to specify where to pull from."
            cd "$OLDPWD"
            continue
          fi
    
          [ -z "$IPADDR" ] && IPADDR=$(getIpFromUciConfig)
    
          pullConfigFromIp "$IPADDR" &
        cd "$OLDPWD"
        
        unset IPADDR
      ;;
    esac
  done
}

pushConfigsSafe () {
  ARG=
  IPADDR=
    
  # Parse args and populate targets list
  while [ -n "$1" ]; do
    ARG="$1"
    shift
  
    case "$ARG" in
      -i|--ip ) IPADDR="$1"; shift ;;
      * )
        cd "$ARG"
          [ -d "$DIR_UCI_CONFIG" ] \
            || { log "UCI config directory not found! All targets must be valid. Aborting..." ; exit 1 ; }

          [ -z "$IPADDR" ] && IPADDR=$(getIpFromUciConfig)
    
          # Check local repo is clean
          if ! repoIsClean ; then
            log "Directory contains uncommited changes. Please commit first. Aborting..." ; exit 2
          fi
        cd "$OLDPWD"
        
        unset IPADDR
      ;;
    esac
  done
  
        RETVAL=
        PUSH_FILES=
  
        # Open ssh persistent connection
        try "$SSH_PERSIST $IPADDR /bin/sh -c \'[ -d /$DIR_OVERLAY/$ETC_FAILSAFE ]\' "
          RETVAL=$?
          if [ $RETVAL -eq 0 ] ; then
            log "Previous push hasn't been confirmed yet. Use \`$CMDNAME confirm ...\` first. Aborting..." 
            exit 3
          fi

        #   pull and check against last rev ; wait
        #      [if not clean, exit "try hg merge"]
        #   copy files ; wait ; "config sent"
        #   swap /etc /etc.fsf ; wait ; "New config in place"
        #   reboot ; "Reboot"
        # close ssh persistent connection
        # ping ; wait
        # open ssh persistent connection
        #   remove /etc.fsf
        # close ssh persist
        # save last rev name pushed
        
#####
        
####
}

pushConfigs () {
  ARG=
  IPADDR=
  
  while [ -n "$1" ]; do
    ARG="$1"
    shift
  
    case "$ARG" in
      -i|--ip ) IPADDR="$1" ; shift ;;
      -n|--no-reboot ) REBOOT_CMD="$NO_REBOOT_CMD" ;;
      -f|--full ) unset DIR_TO_PUSH ;;
      -q|--quick ) DIR_TO_PUSH="$FILES_TO_QUICK_PUSH" ; REBOOT_CMD="$NO_REBOOT_CMD" ;;
      -w|--wait ) 
        if [ -z "${1//[0-9]/}" ] ; then
          REBOOT_WAIT=$1 ; shift
        else usage "Error: Wait delay must be an integer"
        fi
      ;;
      * )
        if cd "$ARG" ; then
          [ -d "$DIR_UCI_CONFIG" ] \
            || { log "UCI config directory not found. Ignoring host." ; cd "$OLDPWD" ; unset IPADDR ; continue ; }
    
          [ -z "$IPADDR" ] && IPADDR=$(getIpFromUciConfig)
    
          pushConfigToIp "$IPADDR" &
        cd "$OLDPWD"
        fi
        
        unset IPADDR
      ;;
    esac
  done
}

confirmConfigs () {
  ARG=
  IPADDR=
  
  while [ -n "$1" ]; do
    ARG="$1"
    shift
  
    cd "$ARG"
      [ -d "$DIR_UCI_CONFIG" ] \
        || { log "UCI config directory not found. Ignoring host." ; cd "$OLDPWD" ; continue ; }
      
      IPADDR=$(getIpFromUciConfig)

      confirmConfigToIp "$IPADDR" &
    cd "$OLDPWD"
  done
}

statusConfigs () {
  ARG=
  IPADDR=
  
  while [ -n "$1" ]; do
    ARG="$1"
    shift
    
    case "$ARG" in
      -f|--full ) DIR_TO_DIFF="$DIR_OVERLAY" ;;
      -i|--ip ) IPADDR="$1" ; shift ;;
      * )
        cd "$ARG"
          [ -d "$DIR_UCI_CONFIG" ] \
            || { log "UCI config directory not found. Ignoring host." ; unset IPADDR ; continue ; }
          
          [ -z "$IPADDR" ] && IPADDR=$(getIpFromUciConfig)
          
          statusConfigFromIp "$IPADDR" &
        cd "$OLDPWD"
        
        unset IPADDR
      ;;
    esac
  done
}

export ACTION="$1"
shift

export LOGFILE="/tmp/$CMDNAME-$ACTION.log"
rm -f "$LOGFILE"

case "$ACTION" in
  pull | push | confirm ) 
    [ -z "$*" ] && usage "Error: No NAME(s) specified on command line."
    ${ACTION}Configs "$@"
  ;;
  status )
    if [ -z "$*" ] ; then 
      ${ACTION}Configs *
    else 
      ${ACTION}Configs "$@"
    fi
  ;;
  "" ) usage ;;
  * ) usage "Error: Unknown action \"$ACTION\"" ;;
esac

log "*" "All jobs started. Sorted logfile will be written to $LOGFILE"
wait
sort "$LOGFILE" | sed "/\(Pulling\|Sending\|Trying\)/s/^/\n/" > "$LOGFILE".sort
mv -f "$LOGFILE.sort" "$LOGFILE"

echo
[ -s "$CNAMES_DIRTY" ] && egrep "($(<"$CNAMES_DIRTY")^$)" "$LOGFILE" | uniq
[ -s "$CNAMES_PUSHED" ] && echo -e "Don't forget to run:\n$CMDNAME confirm $(<"$CNAMES_PUSHED")"
rm -rf "${CNAMES_DIRTY:?}" "${CNAMES_PUSHED:?}"
